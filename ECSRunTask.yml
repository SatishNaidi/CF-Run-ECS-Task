AWSTemplateFormatVersion: 2010-09-09
Description: An example CloudFormation template for Fargate
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Task Defs Network Configuration
        Parameters:
          - VPC
          - Subnets
          - TaskDefSecurityGroup
      - Label:
          default: ECS Configuration
        Parameters:
          - Image
Parameters:
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Default: vpc-09716e17eb6129849
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default: 'subnet-023efb1e07ac288f0,subnet-04c94da52c0808584,subnet-0c04008c1cc5939e1'
  Image:
    Type: String
    Default: '495830459543.dkr.ecr.us-east-1.amazonaws.com/ecs-testing:latest'
  TaskDefSecurityGroup:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: Make sure to select a SG from above selected VPC
    Default: sg-0894402973926b0df
Resources:
  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Join
        - '-'
        - - !Ref AWS::StackName
          - Cluster
  ExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref AWS::StackName
          - ECS-ExecutionRole1
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  TaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref AWS::StackName
          - ECS-TaskRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join
        - ''
        - - /ecs/
          - !Ref AWS::StackName
          - -TaskDefinition
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn: LogGroup
    Properties:
      Family: !Join
        - ''
        - - !Ref AWS::StackName
          - TaskDefinition
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 0.5GB
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: MyApp
          Image: !Ref Image
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref AWS::StackName
          - LambdaRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonECS_FullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  CustomResourceLMF:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Custom Resource Created by ECS CF Stack for Running Task
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      FunctionName: !Join
        - '-'
        - - CustomResource
          - !Ref AWS::StackName
          - LMF
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 300
      Code:
        ZipFile: >
          import boto3

          import warnings

          from botocore.vendored import requests

          import json

          def send(event, context, responseStatus, responseData,physicalResourceId=None, noEcho=False):
              warnings.filterwarnings('ignore', category=DeprecationWarning)
              responseUrl = event['ResponseURL']
              print(responseUrl)
              responseBody = {}
              responseBody['Status'] = responseStatus
              responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
              responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
              responseBody['StackId'] = event['StackId']
              responseBody['RequestId'] = event['RequestId']
              responseBody['LogicalResourceId'] = event['LogicalResourceId']
              responseBody['NoEcho'] = noEcho
              responseBody['Data'] = responseData
              json_responseBody = json.dumps(responseBody)
              print('Response body:\n' + json_responseBody)
              headers = {'content-type': '','content-length': str(len(json_responseBody))}
              try:
                  response = requests.put(responseUrl, data=json_responseBody, headers=headers)
                  print('Status code: ' + response.reason)
              except Exception as e:
                  print('send(..) failed executing requests.put(..): ' + str(e))

          def run_task(client, cluster_id,task_df,subnets,security_groups):
              response = client.run_task(
                  cluster=cluster_id,
                  launchType='FARGATE',
                  taskDefinition=task_df,
                  count=1,
                  platformVersion='LATEST',
                  networkConfiguration={
                      'awsvpcConfiguration': {
                          'subnets': subnets,
                          'securityGroups': security_groups,
                          'assignPublicIp': 'ENABLED'
                      }
                  })
              return response

          def stop_task(client, cluster_id,task_arn):
              response = client.stop_task(
                  cluster=cluster_id,
                  task=task_arn
              )
              return response

          def ordered(obj):
              if isinstance(obj, dict):
                  return sorted((k, ordered(v)) for k, v in obj.items())
              if isinstance(obj, list):
                  return sorted(ordered(x) for x in obj)
              else:
                  return obj

          def lambda_handler(event, context):
              print(event)
              SUCCESS = 'SUCCESS'
              FAILED = 'FAILED'
              try:
                  subnets = event['ResourceProperties']['Subnets']
                  security_groups = event['ResourceProperties']['SecurityGroups']
                  cluster_id = event['ResourceProperties']['ClusterId']
                  task_df = event['ResourceProperties']['TaskDefinition'].split('/')[-1]

                  client = boto3.client('ecs')

                  if event['RequestType'] == 'Create':
                      response = run_task(client, cluster_id, task_df, subnets, security_groups)
                      task_arn = response['tasks'][0]['taskArn']
                      send(event, context, SUCCESS, {'Response': str(response)}, task_arn)
                  elif event['RequestType'] in ['Delete','Update']:
                      task_arn = event['PhysicalResourceId']
                      if task_arn is None:
                          err = 'Could not find the TaskARN in Physical ID'
                          print(err)
                          send(event, context, FAILED, {'Error': err})
                          return
                      print(f'TaskARN:{task_arn}')
                      if event['RequestType'] == 'Delete':
                          response = stop_task(client, cluster_id, task_arn)
                          print(response)
                          send(event, context, SUCCESS, {'Response': str(response)})
                      elif event['RequestType'] == 'Update':
                          if ordered(event.get("ResourceProperties")) != ordered(event.get("OldResourceProperties")):
                              print(stop_task(client, cluster_id, task_arn))
                              response = run_task(client, cluster_id, task_df, subnets, security_groups)
                              task_arn = response['tasks'][0]['taskArn']
                              send(event, context, SUCCESS, {'Response': str(response)}, task_arn)
                          else:
                              msg = {'Message' : 'No Updates required'}
                              send(event, context, SUCCESS, msg, task_arn)

              except Exception as err:
                  print(err)
                  send(event, context, FAILED, {'Error': str(err)})



  ECSRunTask:
    Type: 'Custom::ECSRunTask'
    Properties:
      ServiceToken: !GetAtt
        - CustomResourceLMF
        - Arn
      ClusterId: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      ContainerName: MyContainer
      SecurityGroups: !Ref TaskDefSecurityGroup
      Subnets: !Ref Subnets
